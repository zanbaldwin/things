map $http_x_forwarded_proto $fastcgi_https {
    default '';
    https on;
}

upstream phpfpm {
    server php:9000;
}

error_log /proc/self/fd/2 warn;

server {
    listen 80 default_server;
    listen [::]:80 default_server ipv6only=on;
    server_tokens off;
    charset utf-8;

    client_max_body_size 16m;
    client_body_buffer_size 128k;

    # If you want a different webroot, then use a symlink.
    root /srv/public;
    index index.php index.html index.htm;
    autoindex off;

    access_log /proc/self/fd/1 combined;
    error_log /proc/self/fd/2 warn;

    # Block access to "hidden" files and directories whose names begin with a period. This includes directories used by
    # version control systems such as Subversion or Git to store control files.
    location ~ '(^|/)\.' {
        deny all;
    }
    # But allow "Well-Known URIs" as per RFC 5785.
    location ~* ^/.well-known/ {
        allow all;
    }

    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }

    location = /robots.txt {
        allow all;
        try_files $uri $uri/ @robots;
        log_not_found off;
        access_log off;
    }
    # Fallback in case robots.txt doesn't exist.
    location @robots {
        return 200 "User-agent: *\nAllow: *\n";
    }

    location / {
        # Push any resources listed in the Link header before the browser has requested it to speed up on HTTP/2.
        http2_push_preload on;
        # Warning for future me: the "try_files" directive is *LITERAL*, it means try a *FILE*. Only the *LAST* argument
        # will be treated as a fallback causing an internal rewrite (ie. the another location block). Do *NOT* put any
        # arguments after "/index.php" or you'll spend nearly two days trying to figure out why Nginx is serving the
        # literal contents of the index.php file as "application/octet-stream" MIME type.
        try_files $uri $uri/ /index.php$is_args$args;
    }

    # Pass all PHP files onto PHP's Fast Process Manager server.
    location ~* '[^/]\.php(/|$)' {
        fastcgi_split_path_info '^(.+?\.php)(/.*)$';
        if (!-f $document_root$fastcgi_script_name) {
            return 404;
        }
        try_files $uri $fastcgi_script_name =404;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME   $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO         $fastcgi_path_info;
        fastcgi_param PATH_TRANSLATED   $document_root$fastcgi_path_info;
        fastcgi_param REDIRECT_STATUS   200;
        # Specify the HTTPS FCGI param. Some software, such as WordPress, is written so badly that it only understands
        # Apache-specific conventions. These two param declarations (plus the variable map above) should be enough to
        #detect if SSL was enabled at some point in the proxy. Standard HTTPS param is already specified in
        # fastcgi_params file.
        fastcgi_param HTTPS $fastcgi_https if_not_empty;

        fastcgi_intercept_errors on;
        fastcgi_buffer_size 512k;
        fastcgi_buffers 1024 16k;
        fastcgi_busy_buffers_size 1m;
        fastcgi_connect_timeout 60;
        fastcgi_send_timeout 180;
        fastcgi_read_timeout 180;
        fastcgi_temp_file_write_size 4m;
        fastcgi_max_temp_file_size 4m;

        include fastcgi_params;
        fastcgi_pass phpfpm;
    }

    location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
        expires max;
        log_not_found off;
    }
}
